generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserBillingPlan {
  planKey         String             @id @db.VarChar(50)
  name            String             @db.VarChar(100)
  description     String?
  stripePriceId   String             @unique @db.VarChar(100)
  stripeProductId String             @db.VarChar(100)
  price           Decimal            @db.Decimal(10, 2)
  currency        String             @db.VarChar(3)
  interval        String             @db.VarChar(20)
  isActive        Boolean            @default(true)
  meta            Json?              @db.Json
  createdAt       DateTime           @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime           @updatedAt @db.Timestamptz(6)
  subscriptions   UserSubscription[]

  @@index([isActive])
  @@index([stripePriceId])
  @@map("user_billing_plans")
}

model UserSubscription {
  id                   BigInt          @id @default(autoincrement())
  userId               String          @db.VarChar(50)
  stripeCustomerId     String          @db.VarChar(100)
  stripeSubscriptionId String          @unique @db.VarChar(100)
  stripePriceId        String          @db.VarChar(100)
  status               String          @db.VarChar(20)
  interval             String          @db.VarChar(20)
  currentPeriodStart   DateTime        @db.Timestamptz(6)
  currentPeriodEnd     DateTime        @db.Timestamptz(6)
  features             String[]        @db.VarChar(50)
  raw                  Json?           @db.Json
  createdAt            DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt            DateTime        @updatedAt @db.Timestamptz(6)
  billingPlan          UserBillingPlan @relation(fields: [stripePriceId], references: [stripePriceId])
  userProfile          UserProfile     @relation("UserProfileSubscriptions", fields: [userId], references: [clerkUserId])

  @@index([userId])
  @@index([stripePriceId])
  @@index([status])
  @@index([stripeCustomerId])
  @@map("user_subscriptions")
}

model UserBillingAddress {
  id           BigInt      @id @default(autoincrement())
  userId       String      @db.VarChar(50)
  country      String      @db.VarChar(2)
  state        String?     @db.VarChar(100)
  city         String      @db.VarChar(100)
  postalCode   String      @db.VarChar(20)
  addressLine1 String      @db.VarChar(200)
  addressLine2 String?     @db.VarChar(200)
  fullAddress  String
  createdAt    DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime    @updatedAt @db.Timestamptz(6)
  userProfile  UserProfile @relation("UserProfileBillingAddresses", fields: [userId], references: [clerkUserId])

  @@index([userId])
  @@index([country])
  @@map("user_billing_address")
}

model UserActivityLog {
  id           BigInt       @id @default(autoincrement())
  userId       String       @db.VarChar(50)
  clerkUserId  String?      @db.VarChar(50)  // Nuevo campo para compatibilidad
  clerkSessionId String?    @db.VarChar(100) // Campo para session ID de Clerk
  action       String       @db.VarChar(120)
  description  String?      @db.Text         // Campo para descripci√≥n del evento
  ipAddress    String?      @db.VarChar(45)
  userAgent    String?
  metadata     Json?        @db.Json
  sessionId    String?      @db.VarChar(100)
  resourceId   String?      @db.VarChar(100)
  resourceType String?      @db.VarChar(50)
  createdAt    DateTime     @default(now()) @db.Timestamptz(6)
  userProfile  UserProfile? @relation("UserProfileActivityLogs", fields: [userId], references: [clerkUserId])

  @@index([userId])
  @@index([clerkUserId])
  @@index([action])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@index([clerkUserId, createdAt])
  @@map("user_activity_log")
}

model UserPermission {
  id          BigInt      @id @default(autoincrement())
  userId      String      @db.VarChar(50)
  type        String      @db.VarChar(50)
  value       String      @db.VarChar(100)
  expiresAt   DateTime?   @db.Timestamptz(6)
  createdAt   DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime    @updatedAt @db.Timestamptz(6)
  userProfile UserProfile @relation("UserProfilePermissions", fields: [userId], references: [clerkUserId])

  @@index([userId])
  @@index([type])
  @@index([userId, type])
  @@index([expiresAt])
  @@map("user_permissions")
}

model UserProfile {
  id                  BigInt               @id @default(autoincrement())
  clerkUserId         String               @unique @db.VarChar(50)
  email               String               @db.VarChar(255)
  firstName           String?              @db.VarChar(100)
  lastName            String?              @db.VarChar(100)
  profileImageUrl     String?
  phoneNumber         String?              @db.VarChar(20)
  username            String?              @db.VarChar(100)
  lastLoginAt         DateTime?            @db.Timestamptz(6)
  isActive            Boolean              @default(true)
  emailVerified       Boolean              @default(false)
  phoneVerified       Boolean              @default(false)
  gdprConsent         Boolean              @default(false)
  gdprConsentDate     DateTime?            @db.Timestamptz(6)
  legalBasis          String               @default("contract") @db.VarChar(50)
  retentionUntil      DateTime             @db.Timestamptz(6)
  deletionRequested   Boolean              @default(false)
  deletionRequestedAt DateTime?            @db.Timestamptz(6)
  registrationIp      String?              @db.VarChar(45)
  lastAccessIp        String?              @db.VarChar(45)
  lastUserAgent       String?
  dataVersion         Int                  @default(1)
  lastSyncAt          DateTime             @default(now()) @db.Timestamptz(6)
  clerkMetadata       Json?                @db.Json
  preferences         Json?                @db.Json
  createdAt           DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime             @updatedAt @db.Timestamptz(6)
  activityLogs        UserActivityLog[]    @relation("UserProfileActivityLogs")
  billingAddresses    UserBillingAddress[] @relation("UserProfileBillingAddresses")
  permissions         UserPermission[]     @relation("UserProfilePermissions")
  subscriptions       UserSubscription[]   @relation("UserProfileSubscriptions")

  @@index([clerkUserId])
  @@index([email])
  @@index([isActive])
  @@index([lastLoginAt])
  @@index([retentionUntil])
  @@index([deletionRequested])
  @@index([gdprConsent])
  @@index([createdAt])
  @@index([lastSyncAt])
  @@map("user_profiles")
}
