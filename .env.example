# To access your Clerk keys, first create a clerk.com account then open dashboard.clerk.com. Create a new Clerk application and copy the Keys from step 2 in the Next.js quickstart tab.
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY="pk_test_..."
CLERK_SECRET_KEY="sk_test_..."

# Webhook Secret from Clerk Dashboard - Required for webhook signature validation
CLERK_WEBHOOK_SECRET="whsec_..."
# The route at which your authentication flow lives, for more information see: https://clerk.com/docs/deployments/clerk-environment-variables
NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
NEXT_PUBLIC_CLERK_SIGN_OUT_URL=/sign-out

# Redirect URLs for after authenticating, for more information see: https://clerk.com/docs/guides/custom-redirects

# Force redirect URLs - Always redirect to these URLs after authentication (overrides redirect_url)
NEXT_PUBLIC_CLERK_SIGN_IN_FORCE_REDIRECT_URL=/web-dashboard
NEXT_PUBLIC_CLERK_SIGN_UP_FORCE_REDIRECT_URL=/web-dashboard

# Fallback redirect URLs - Used when no redirect_url is present (e.g., direct navigation to auth pages)
NEXT_PUBLIC_CLERK_SIGN_OUT_FALLBACK_REDIRECT_URL=/
NEXT_PUBLIC_CLERK_SIGN_UP_FALLBACK_REDIRECT_URL=/

# DATOS DE CONEXION POSTGRESQL - NEON.COM Frankfurt [DB1] Esta APP
# Project ID : flat-cloud-09473494
# Project name: clerk-nextjs-auth-starter-template
# PostgreSQL 17
DB1_HOST=""
DB1_PORT=""
DB1_NAME=""
DB1_USER=""
DB1_PASSWORD=""
# DB1_DATABASE_URL para Neon.com PostgreSQL con SSL
DB1_DATABASE_URL="postgresql://..."



# DATOS DE CONEXION POSTGRESQL - NEON.COM Frankfurt [DB2] Applicacion Externa
# Project ID : fragrant-credit-50258611
# Project name: generador-de-cursos
# PostgreSQL 17
DB2_HOST=''
DB2_PORT=''
DB2_NAME=''
DB2_USER=''
DB2_PASSWORD=''
DB2_DATABASE_URL="postgresql://..."
# PGSSLMODE_NEON='require'
# PGCHANNELBINDING_NEON_DB2='require'










# This was inserted by `prisma init`:
# Environment variables declared in this file are automatically made available to Prisma.
# See the documentation for more detail: https://pris.ly/d/prisma-schema#accessing-environment-variables-from-the-schema

# Prisma supports the native connection string format for PostgreSQL, MySQL, SQLite, SQL Server, MongoDB and CockroachDB.
# See the documentation for all the connection string options: https://pris.ly/d/connection-strings

# The following `prisma+postgres` URL is similar to the URL produced by running a local Prisma Postgres 
# server with the `prisma dev` CLI command, when not choosing any non-default ports or settings. The API key, unlike the 
# one found in a remote Prisma Postgres URL, does not contain any sensitive information.

# DATOS DE STRIPE MODO TEST
STRIPE_API_KEY="pk_test_..."
STRIPE_SECRET_KEY="sk_test_..."
# Clave p√∫blica de Stripe - Disponible en cliente y servidor (pk_test/pk_live)
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY="pk_test_..."
STRIPE_WEBHOOK_SECRET="whsec_..."

# Neon API Key - Get from https://console.neon.tech/app/settings/api-keys
NEON_API_KEY="napi_..."
